package com.grupo5.apitpajedrez.dominio;import lombok.*;import java.util.ArrayList;import java.util.List;@Data@Getter@Setter@NoArgsConstructor@AllArgsConstructorpublic class Jaque {    private int[][] tablero;    private int turnoONo;    private Posicion posicion;    public Jaque(int[][] tablero) {        this.tablero = tablero;        this.turnoONo = 0;        this.posicion = null;    }    public List<Posicion> verJaque(int turnoONo){        List<Posicion> amenazas = new ArrayList<>();        this.turnoONo = turnoONo;        posicion = buscarReyTurno(tablero, turnoONo);        amenazas.addAll(damaTorreAlfil());        amenazas.addAll(caballos());        amenazas.addAll(peones());        amenazas.addAll(rey());        return amenazas;    }    private Posicion buscarReyTurno(int[][] tablero, int turno){        for(int i = 0; i < 10; i++){            for(int j = 0; j < 10; j++){                if(tablero[i][j] / 10 == turno && tablero[i][j] % 10 == 9){                    return new Posicion(i, j);                }            }        }        return null;    }    private List<Posicion> damaTorreAlfil(){        List<Posicion> amenazas = new ArrayList<>();        Posicion amenaza;        int c;        int r;        int[] x = {0, 0, -1, 1, -1, -1, 1, 1};        int[] y = {-1, 1, 0, 0, -1, 1, -1, 1};        for (int i = 0; i < x.length; i++) {            c = posicion.getColumn();            r = posicion.getRow();            do {                c += x[i];                r += y[i];                if ((tablero[c][r] / 10 == 2 && turnoONo == 3) || (tablero[c][r] / 10 == 3 && turnoONo == 2)) {                    if((x[i] == 0 || y[i] == 0) && (tablero[c][r] % 10 == 5 || tablero[c][r] % 10 == 8)){                        amenaza = new Posicion(c, r);                        amenazas.add(amenaza);                    } else if ((x[i] != 0 && y[i] != 0) && (tablero[c][r] % 10 == 7 || tablero[c][r] % 10 == 8)) {                        amenaza = new Posicion(c, r);                        amenazas.add(amenaza);                    } else {                        break;                    }                } else if(tablero[c][r] > 0){                    break;                }            } while (tablero[c][r] != 1);        }        return amenazas;    }    private List<Posicion> caballos(){        List<Posicion> amenazas = new ArrayList<>();        Posicion amenaza;        int c;        int r;        int[] x = { 1,1,-1,0,0, 1,-3,-1,1, 0, 0,-1};        int[] y = {-1,0,-1,3,1,-1, 0, 0,1,-3,-1, 1};        c = posicion.getColumn();        r = posicion.getRow();        for (int i = 0; i < x.length; i++) {            c += x[i];            r += y[i];            if (tablero[c][r] == 1 && (i == 0 || i == 3 || i == 6 || i == 9)) {                for(int j = 0; j < 2; j++){                    i++;                    c += x[i];                    r += y[i];                }            } else {                if (tablero[c][r] / 10 == 2 && turnoONo == 3 && tablero[c][r] % 10 == 6                        && i != 0 && i != 3 && i != 6 && i != 9) {                    amenaza = new Posicion(c, r);                    amenazas.add(amenaza);                } else if (tablero[c][r] / 10 == 3 && turnoONo == 2 && tablero[c][r] % 10 == 6                        && i != 0 && i != 3 && i != 6 && i != 9) {                    amenaza = new Posicion(c, r);                    amenazas.add(amenaza);                }            }        }        return amenazas;    }    private List<Posicion> peones(){        List<Posicion> amenazas = new ArrayList<>();        Posicion amenaza;        int c;        int r;        if(turnoONo == 2){            c = posicion.getColumn() + 1;            r = posicion.getRow() + 1;            for(int i = 0; i < 2; i++){                if(tablero[c][r] / 10 == 3 && tablero[c][r] % 10 == 4){                    amenaza = new Posicion(c, r);                    amenazas.add(amenaza);                }                c -= 2;            }        }        if(turnoONo == 3){            c = posicion.getColumn() - 1;            r = posicion.getRow() - 1;            for(int i = 0; i < 2; i++){                if(tablero[c][r] / 10 == 2 && tablero[c][r] % 10 == 4){                    amenaza = new Posicion(c, r);                    amenazas.add(amenaza);                }                c += 2;            }        }        return amenazas;    }    private List<Posicion> rey(){        List<Posicion> amenazas = new ArrayList<>();        Posicion amenaza;        int c;        int r;        int[] x = {0, 0, -1, 1, -1, -1, 1, 1};        int[] y = {-1, 1, 0, 0, -1, 1, -1, 1};        for (int i = 0; i < x.length; i++) {            c = posicion.getColumn();            r = posicion.getRow();            c += x[i];            r += y[i];            if (tablero[c][r] / 10 == 2 && turnoONo == 3 && tablero[c][r] % 10 == 9) {                amenaza = new Posicion(c, r);                amenazas.add(amenaza);            } else if (tablero[c][r] / 10 == 3 && turnoONo == 2 && tablero[c][r] % 10 == 9) {                amenaza = new Posicion(c, r);                amenazas.add(amenaza);            }        }        return amenazas;    }}